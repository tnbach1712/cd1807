# name: Azure Pipelines

# # Start with a minimal pipeline that you can customize to build and deploy your code.
# # Add steps that build, run tests, deploy, and more:
# # https://aka.ms/yaml
# trigger:
# - main

# # ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# # Otherwise comment out the line below. 
# pool:
#   name: Default

# variables:
#   python.version: '3.7.6'
#   # ToDo: Replace the service connection name as used in the DevOps project settings
#   azureServiceConnectionId: '05a406db-dead-4948-b254-4e15fb72e8af'
#   # Project root folder. Point to the folder containing manage.py file.
#   projectRoot: $(System.DefaultWorkingDirectory)
#   # Environment name
#   environmentName: 'test'

# stages:
# - stage: Build
#   jobs:
#   - job: BuildInfrastructure
#     steps:
#     # Install Terraform on the pipeline agent 
#     - task: TerraformInstaller@0
#       displayName: 'Terrafom installation'
#       inputs:
#         terraformVersion: '1.7.3'
    
#     # Run Terraform Init on the pipeline agent 
#     # ToDo: Replace the resource group name, storage account name, and container name below
#     - task: TerraformTaskV3@3
#       displayName: 'Terrafom init'
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#         backendServiceArm: '$(azureServiceConnectionId)'
#         backendAzureRmResourceGroupName: 'Azuredevops'
#         backendAzureRmStorageAccountName: 'tfstate809015124'
#         backendAzureRmContainerName: 'tfstate'
#         backendAzureRmKey: 'test.terraform.tfstate'

#     # Run Terraform Validate    
#     - task: TerraformTaskV3@3
#       displayName: Terraform validate
#       inputs:
#         provider: 'azurerm'
#         command: 'validate'

    
#     # Run Terraform Apply
#     # ToDo: Change the workingDirectory path, as applicable to you
#     - task: TerraformTaskV3@3
#       displayName: Terraform apply
#       inputs:
#         provider: 'azurerm'
#         command: 'apply'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#         environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#     # Destroy the resources in Azure
#     # ToDo: Change the workingDirectory path, as applicable to you
#     - task: TerraformTaskV3@3
#       displayName: Terraform destroy
#       inputs:
#         provider: 'azurerm'
#         command: 'destroy'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#         environmentServiceNameAzureRM: '$(azureServiceConnectionId)'        


name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

pool:
  name: default

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'e56e48d6-bf0d-48af-90e1-f5ed15400daa' #'myServiceConnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'
  backendAzureRmResourceGroupName: 'bachtn-demo'
  backendAzureRmStorageAccountName: 'tfstate2176126194'
  backendAzureRmContainerName: 'tfstate'
  subscriptionID: fbda4cc5-31d3-4801-9427-d377d6038291
stages:
- stage: InstallDependencies
  jobs:
  - job: InstallDependencies
    environment: 
      name: bachtn-env  # Ensure this matches the environment name in Azure DevOps
      resourceType: virtualMachine 
    steps:
    - task: CmdLine@2
      displayName: Check Terraform Installed
      inputs:
        script: 'echo $(terraform -v)'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: Install Terraform if not exists
      continueOnError: true
      condition: failed()
      inputs:
        script: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | \
          gpg --dearmor | \
          sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
          https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
          sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update
          sudo apt-get install terraform
        workingDirectory: $(System.DefaultWorkingDirectory)

- stage: Build
  dependsOn: InstallDependencies
  jobs:
    - job: buildTerraform
      steps:
      - task: CmdLine@2
        displayName: Install Terraform
        inputs:
          script: 'terraform -v'
          workingDirectory: $(System.DefaultWorkingDirectory)
      - task: CmdLine@2
        displayName: Terraform Init
        inputs:
          script: 'terraform init'
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
      - task: CmdLine@2
        displayName: Terraform Validate
        inputs:
          script: 'terraform validate'
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
      - task: CmdLine@2
        displayName: Terraform Plan
        inputs:
          script: 'terraform plan'
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
      - task: CmdLine@2
        displayName: Terraform Apply
        inputs:
          script: 'terraform apply -auto-approve'
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
      - task: CmdLine@2
        displayName: Show tree 
        inputs:
          script: 'ls'
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test

      # - task: AzureFileCopy@4
      #   displayName: 'Azure File Copy - Upload Terraform State'
      #   inputs:
      #     sourcePath: '$(System.DefaultWorkingDirectory)/terraform/environments/test/test.terraform.tfstate' # Replace with the path to your Terraform state file
      #     destination: 'AzureBlob'
      #     storage: '$(backendAzureRmStorageAccountName)'
      #     containerName: '$(backendAzureRmContainerName)'
      #     sasTokenTimeOutInMinutes: 60
      #     azureSubscription: $(subscriptionID)
    - job: buildNewMan
      dependsOn: buildTerraform
      steps:
      - task: CmdLine@2
        displayName: Install Newman
        inputs:
          script: 'sudo npm install -g newman'
          workingDirectory: $(System.DefaultWorkingDirectory)
      # Postman Data Validation Test Suite    
      # ToDo: Verify the working directory
      - task: CmdLine@2
        displayName: Run Data Validation Tests
        continueOnError: true
        inputs:
          script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
      # Postman Regression Test Suite    
      # ToDo: Verify the working directory
      - task: CmdLine@2
        displayName: Run Regression Tests
        continueOnError: true
        inputs:
          script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
      # Postman - Publish Results 
      # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/TEST-*.xml'
          searchFolder:       # ToDo
          mergeTestResults: true
          testRunTitle:       # ToDo