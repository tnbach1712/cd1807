trigger:
- main

pool:
  name: Default

variables:
  azureServiceConnectionId: '05a406db-dead-4948-b254-4e15fb72e8af' #'myServiceConnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'
  backendAzureRmResourceGroupName: 'bachtn-demo'
  backendAzureRmStorageAccountName: 'tfstate2176126194'
  backendAzureRmContainerName: 'tfstate'
  subscriptionID: a4b11da3-2642-4ae2-b8e0-ba40545a13d6
  ARM_CLIENT_ID: 63233d70-86e2-458d-b76a-ed3bb9831097
  ARM_CLIENT_SECRET: SZw8Q~G99KHOdEXmiqxSCeUXucIyvpXLocVJZbdN
  ARM_SUBSCRIPTION_ID: a4b11da3-2642-4ae2-b8e0-ba40545a13d6
  ARM_TENANT_ID: f958e84a-92b8-439f-a62d-4f45996b6d07

stages:
- stage: BuildInfrastructure
  displayName: 'Build Infrastructure'
  jobs:
  - job: InstallDependencies
    displayName: 'Install Dependencies' 
    steps:
    - task: CmdLine@2
      displayName: Check Terraform Installed
      inputs:
        script: 'echo $(terraform -v)'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: Install Terraform if not exists
      continueOnError: true
      condition: failed()
      inputs:
        script: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | \
          gpg --dearmor | \
          sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
          https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
          sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update
          sudo apt-get install terraform
        workingDirectory: $(System.DefaultWorkingDirectory)
  - job: BuildInfra
    dependsOn: InstallDependencies
    steps:
    - script: echo "Deploying Infrastructure..."
      displayName: 'Deploy Infrastructure'
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
          az account set --subscription $(ARM_SUBSCRIPTION_ID)
    # - task: AzureCLI@2
    #   inputs:
    #     azureSubscription: $(azureServiceConnectionId)
    #     scriptType: 'bash'
    #     scriptLocation: 'inlineScript'
    #     inlineScript: |
    #       echo "Running Azure CLI commands"
    #       az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
    #       az account set --subscription $(ARM_SUBSCRIPTION_ID)
    #       az group list --output table
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    - script: |
        terraform init #-backend-config="storage_account_name=$(storageAccountName)" -backend-config="container_name=$(containerName)" -backend-config="access_key=$(storageAccessKey)" -backend-config="key=cicd/terraform.tfstate"
      displayName: 'Initialize Terraform'
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
    - script: |
        terraform plan -out=tfplan
      displayName: 'Plan Terraform Deployment'
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
    # - script: |
    #     terraform apply -auto-approve tfplan
    #   displayName: 'Apply Terraform Deployment'
