trigger:
- main

pool:
  name: Default

variables:
  ARM_CLIENT_ID: $(servicePrincipalId)
  ARM_CLIENT_SECRET: $(servicePrincipalKey)
  ARM_SUBSCRIPTION_ID: $(subscriptionId)
  ARM_TENANT_ID: $(tenantId)

stages:
- stage: BuildInfrastructure
  displayName: 'Build Infrastructure'
  jobs:
  - job: InstallDependencies
    displayName: 'Install Dependencies' 
    steps:
    - task: CmdLine@2
      displayName: Check Terraform Installed
      inputs:
        script: 'echo $(terraform -v)'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: Install Terraform if not exists
      continueOnError: true
      condition: failed()
      inputs:
        script: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | \
          gpg --dearmor | \
          sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
          https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
          sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update
          sudo apt-get install terraform
        workingDirectory: $(System.DefaultWorkingDirectory)
  - job: BuildInfra
    dependsOn: InstallDependencies
    steps:
    - script: echo "Deploying Infrastructure..."
      displayName: 'Deploy Infrastructure'
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'YourServiceConnectionNameOrId'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Running Azure CLI commands"
          az group list --output table
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    - script: |
        terraform init #-backend-config="storage_account_name=$(storageAccountName)" -backend-config="container_name=$(containerName)" -backend-config="access_key=$(storageAccessKey)" -backend-config="key=cicd/terraform.tfstate"
      displayName: 'Initialize Terraform'
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
    - script: |
        terraform plan -out=tfplan
      displayName: 'Plan Terraform Deployment'
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/environments/test
    # - script: |
    #     terraform apply -auto-approve tfplan
    #   displayName: 'Apply Terraform Deployment'
